#include<bits/stdc++.h>
using namespace std;

namespace DFS
{
    struct vertex
    {
        int visited;
        int start;
        int finish;
        vertex()
        {
            visited = 0;
            start = 0;
            finish = 0;
        }
    };

    int timer;
    vertex *v;

    void init(int vertices){ timer = 0,v = new vertex[vertices+1]; }
    void destroy(){ delete(v); }

    void dfsUtility(int i,vector<vector<int> > graph)
    {
        if(v[i].visited) return;
        timer++,v[i].start = timer,v[i].visited = true;
        for(int k=0;i<graph[k].size();k++)
            dfsUtility(graph[i][k],graph);
        timer++,v[i].finish = timer;
    }
    void dfs(vector<vector<int> > graph,int vertices)
    {
        for(int i=0;i<vertices;i++)
            if(v[i].visited==0)
                dfsUtility(i,graph);
    }
}

namespace SCC
{
    bool compare(DFS::vertex a,DFS::vertex b)
    {
        return a.finish>b.finish;
    }
    void init(vector<vector<int> > graph,vector<vector<int> > tgraph,int vertices)
    {
        //tgraph is the transpose graph
        DFS::init(vertices);
        DFS::dfs(graph,vertices);
        sort(DFS::v,DFS::v+vertices,compare);
    }
}
